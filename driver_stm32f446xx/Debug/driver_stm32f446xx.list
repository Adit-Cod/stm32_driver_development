
driver_stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b18  08000b20  00010b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b18  08000b18  00010b20  2**0
                  CONTENTS
  4 .ARM          00000000  08000b18  08000b18  00010b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b18  08000b20  00010b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000b20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000b20  00020028  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010b20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000279e  00000000  00000000  00010b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000760  00000000  00000000  000132e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00013a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  00013b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016b4  00000000  00000000  00013c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c26  00000000  00000000  000152f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009bd9  00000000  00000000  00016f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00020af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000035c  00000000  00000000  00020b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b00 	.word	0x08000b00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b00 	.word	0x08000b00

08000204 <GPIO_Init>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_Init(GPIO_Handle_t *pGPIOx)
{
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	/* Configure the Given Pin as per Requested structure */
	static uint32_t gpio_temphandler;
	/* Temp Variable to hold the configuration of register settings */
	static uint8_t EXTI_Temp1,EXTI_Temp2;
	/* Set the MODER Register */
	if( pGPIOx->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	2b03      	cmp	r3, #3
 8000212:	d822      	bhi.n	800025a <GPIO_Init+0x56>
	{
		gpio_temphandler = (pGPIOx->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOx->GPIO_PinConfig.GPIO_PinNumber));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	795b      	ldrb	r3, [r3, #5]
 8000218:	461a      	mov	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	fa02 f303 	lsl.w	r3, r2, r3
 8000224:	461a      	mov	r2, r3
 8000226:	4b5e      	ldr	r3, [pc, #376]	; (80003a0 <GPIO_Init+0x19c>)
 8000228:	601a      	str	r2, [r3, #0]
		pGPIOx->pGPIOx->MODER &= ~(0x3 << pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	791b      	ldrb	r3, [r3, #4]
 8000234:	4619      	mov	r1, r3
 8000236:	2303      	movs	r3, #3
 8000238:	408b      	lsls	r3, r1
 800023a:	43db      	mvns	r3, r3
 800023c:	4619      	mov	r1, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
		pGPIOx->pGPIOx->MODER |= gpio_temphandler;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	4b54      	ldr	r3, [pc, #336]	; (80003a0 <GPIO_Init+0x19c>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	430a      	orrs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	e0d6      	b.n	8000408 <GPIO_Init+0x204>
	}
	else
	{
		/* Interrupt Handling for rising Edge, Falling Edge or Both */
		if(pGPIOx->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	795b      	ldrb	r3, [r3, #5]
 800025e:	2b04      	cmp	r3, #4
 8000260:	d117      	bne.n	8000292 <GPIO_Init+0x8e>
		{
			EXTI->RTSR |= (1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 8000262:	4b50      	ldr	r3, [pc, #320]	; (80003a4 <GPIO_Init+0x1a0>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	7912      	ldrb	r2, [r2, #4]
 800026a:	4611      	mov	r1, r2
 800026c:	2201      	movs	r2, #1
 800026e:	408a      	lsls	r2, r1
 8000270:	4611      	mov	r1, r2
 8000272:	4a4c      	ldr	r2, [pc, #304]	; (80003a4 <GPIO_Init+0x1a0>)
 8000274:	430b      	orrs	r3, r1
 8000276:	6093      	str	r3, [r2, #8]
			/* Clear the corresponding FTSR Bit */
            EXTI->FTSR &= ~(1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 8000278:	4b4a      	ldr	r3, [pc, #296]	; (80003a4 <GPIO_Init+0x1a0>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	7912      	ldrb	r2, [r2, #4]
 8000280:	4611      	mov	r1, r2
 8000282:	2201      	movs	r2, #1
 8000284:	408a      	lsls	r2, r1
 8000286:	43d2      	mvns	r2, r2
 8000288:	4611      	mov	r1, r2
 800028a:	4a46      	ldr	r2, [pc, #280]	; (80003a4 <GPIO_Init+0x1a0>)
 800028c:	400b      	ands	r3, r1
 800028e:	60d3      	str	r3, [r2, #12]
 8000290:	e035      	b.n	80002fe <GPIO_Init+0xfa>
		}
		else if(pGPIOx->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b05      	cmp	r3, #5
 8000298:	d117      	bne.n	80002ca <GPIO_Init+0xc6>
		{
			EXTI->FTSR |= (1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 800029a:	4b42      	ldr	r3, [pc, #264]	; (80003a4 <GPIO_Init+0x1a0>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	7912      	ldrb	r2, [r2, #4]
 80002a2:	4611      	mov	r1, r2
 80002a4:	2201      	movs	r2, #1
 80002a6:	408a      	lsls	r2, r1
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a3e      	ldr	r2, [pc, #248]	; (80003a4 <GPIO_Init+0x1a0>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	60d3      	str	r3, [r2, #12]
			/* Clear the corresponding RTSR Bit */
			EXTI->RTSR &= ~(1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 80002b0:	4b3c      	ldr	r3, [pc, #240]	; (80003a4 <GPIO_Init+0x1a0>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	7912      	ldrb	r2, [r2, #4]
 80002b8:	4611      	mov	r1, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	408a      	lsls	r2, r1
 80002be:	43d2      	mvns	r2, r2
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a38      	ldr	r2, [pc, #224]	; (80003a4 <GPIO_Init+0x1a0>)
 80002c4:	400b      	ands	r3, r1
 80002c6:	6093      	str	r3, [r2, #8]
 80002c8:	e019      	b.n	80002fe <GPIO_Init+0xfa>
		}
		else if(pGPIOx->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	2b06      	cmp	r3, #6
 80002d0:	d115      	bne.n	80002fe <GPIO_Init+0xfa>
		{
			EXTI->FTSR |= (1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 80002d2:	4b34      	ldr	r3, [pc, #208]	; (80003a4 <GPIO_Init+0x1a0>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	7912      	ldrb	r2, [r2, #4]
 80002da:	4611      	mov	r1, r2
 80002dc:	2201      	movs	r2, #1
 80002de:	408a      	lsls	r2, r1
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a30      	ldr	r2, [pc, #192]	; (80003a4 <GPIO_Init+0x1a0>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	60d3      	str	r3, [r2, #12]
			/* Set the corresponding RTSR Bit */
			EXTI->RTSR |= (1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 80002e8:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <GPIO_Init+0x1a0>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	7912      	ldrb	r2, [r2, #4]
 80002f0:	4611      	mov	r1, r2
 80002f2:	2201      	movs	r2, #1
 80002f4:	408a      	lsls	r2, r1
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a2a      	ldr	r2, [pc, #168]	; (80003a4 <GPIO_Init+0x1a0>)
 80002fa:	430b      	orrs	r3, r1
 80002fc:	6093      	str	r3, [r2, #8]
		}

		/* Configure the GPIO selection in SysConfig_EXTICR */
		EXTI_Temp1 = pGPIOx->GPIO_PinConfig.GPIO_PinNumber/FOUR;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	089b      	lsrs	r3, r3, #2
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <GPIO_Init+0x1a4>)
 8000308:	701a      	strb	r2, [r3, #0]
		EXTI_Temp2 = pGPIOx->GPIO_PinConfig.GPIO_PinNumber%FOUR;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	f003 0303 	and.w	r3, r3, #3
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b25      	ldr	r3, [pc, #148]	; (80003ac <GPIO_Init+0x1a8>)
 8000316:	701a      	strb	r2, [r3, #0]
		SYSCFG_CLK_ENABLE();
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <GPIO_Init+0x1ac>)
 800031a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031c:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <GPIO_Init+0x1ac>)
 800031e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000322:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[EXTI_Temp1] |= (GPIO_BASE_TO_EXTIVAL(pGPIOx->pGPIOx) << (EXTI_Temp2*FOUR));
 8000324:	4a23      	ldr	r2, [pc, #140]	; (80003b4 <GPIO_Init+0x1b0>)
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <GPIO_Init+0x1a4>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3302      	adds	r3, #2
 800032c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4920      	ldr	r1, [pc, #128]	; (80003b8 <GPIO_Init+0x1b4>)
 8000336:	428b      	cmp	r3, r1
 8000338:	d04e      	beq.n	80003d8 <GPIO_Init+0x1d4>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	491f      	ldr	r1, [pc, #124]	; (80003bc <GPIO_Init+0x1b8>)
 8000340:	428b      	cmp	r3, r1
 8000342:	d02b      	beq.n	800039c <GPIO_Init+0x198>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	491d      	ldr	r1, [pc, #116]	; (80003c0 <GPIO_Init+0x1bc>)
 800034a:	428b      	cmp	r3, r1
 800034c:	d024      	beq.n	8000398 <GPIO_Init+0x194>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	491c      	ldr	r1, [pc, #112]	; (80003c4 <GPIO_Init+0x1c0>)
 8000354:	428b      	cmp	r3, r1
 8000356:	d01d      	beq.n	8000394 <GPIO_Init+0x190>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	491a      	ldr	r1, [pc, #104]	; (80003c8 <GPIO_Init+0x1c4>)
 800035e:	428b      	cmp	r3, r1
 8000360:	d016      	beq.n	8000390 <GPIO_Init+0x18c>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4919      	ldr	r1, [pc, #100]	; (80003cc <GPIO_Init+0x1c8>)
 8000368:	428b      	cmp	r3, r1
 800036a:	d00f      	beq.n	800038c <GPIO_Init+0x188>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4917      	ldr	r1, [pc, #92]	; (80003d0 <GPIO_Init+0x1cc>)
 8000372:	428b      	cmp	r3, r1
 8000374:	d008      	beq.n	8000388 <GPIO_Init+0x184>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4916      	ldr	r1, [pc, #88]	; (80003d4 <GPIO_Init+0x1d0>)
 800037c:	428b      	cmp	r3, r1
 800037e:	d101      	bne.n	8000384 <GPIO_Init+0x180>
 8000380:	2307      	movs	r3, #7
 8000382:	e02a      	b.n	80003da <GPIO_Init+0x1d6>
 8000384:	2300      	movs	r3, #0
 8000386:	e028      	b.n	80003da <GPIO_Init+0x1d6>
 8000388:	2306      	movs	r3, #6
 800038a:	e026      	b.n	80003da <GPIO_Init+0x1d6>
 800038c:	2305      	movs	r3, #5
 800038e:	e024      	b.n	80003da <GPIO_Init+0x1d6>
 8000390:	2304      	movs	r3, #4
 8000392:	e022      	b.n	80003da <GPIO_Init+0x1d6>
 8000394:	2303      	movs	r3, #3
 8000396:	e020      	b.n	80003da <GPIO_Init+0x1d6>
 8000398:	2302      	movs	r3, #2
 800039a:	e01e      	b.n	80003da <GPIO_Init+0x1d6>
 800039c:	2301      	movs	r3, #1
 800039e:	e01c      	b.n	80003da <GPIO_Init+0x1d6>
 80003a0:	2000001c 	.word	0x2000001c
 80003a4:	40013c00 	.word	0x40013c00
 80003a8:	20000020 	.word	0x20000020
 80003ac:	20000021 	.word	0x20000021
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40013800 	.word	0x40013800
 80003b8:	40020000 	.word	0x40020000
 80003bc:	40020400 	.word	0x40020400
 80003c0:	40020800 	.word	0x40020800
 80003c4:	40020c00 	.word	0x40020c00
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40021400 	.word	0x40021400
 80003d0:	40021800 	.word	0x40021800
 80003d4:	40021c00 	.word	0x40021c00
 80003d8:	2300      	movs	r3, #0
 80003da:	495b      	ldr	r1, [pc, #364]	; (8000548 <GPIO_Init+0x344>)
 80003dc:	7809      	ldrb	r1, [r1, #0]
 80003de:	0089      	lsls	r1, r1, #2
 80003e0:	408b      	lsls	r3, r1
 80003e2:	4618      	mov	r0, r3
 80003e4:	4959      	ldr	r1, [pc, #356]	; (800054c <GPIO_Init+0x348>)
 80003e6:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <GPIO_Init+0x34c>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4302      	orrs	r2, r0
 80003ec:	3302      	adds	r3, #2
 80003ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* Configure Interrupt Delivery using the IMR        */
		EXTI->IMR |= (1<<pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	4b58      	ldr	r3, [pc, #352]	; (8000554 <GPIO_Init+0x350>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a54      	ldr	r2, [pc, #336]	; (8000554 <GPIO_Init+0x350>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6013      	str	r3, [r2, #0]
	}

	/* Set the Output Type Register */
	gpio_temphandler = RESET;
 8000408:	4b53      	ldr	r3, [pc, #332]	; (8000558 <GPIO_Init+0x354>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
	gpio_temphandler = (pGPIOx->GPIO_PinConfig.GPIO_PinOPType << (pGPIOx->GPIO_PinConfig.GPIO_PinNumber));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	7a1b      	ldrb	r3, [r3, #8]
 8000412:	461a      	mov	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	791b      	ldrb	r3, [r3, #4]
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	461a      	mov	r2, r3
 800041e:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <GPIO_Init+0x354>)
 8000420:	601a      	str	r2, [r3, #0]
	pGPIOx->pGPIOx->OTYPER &= ~(0x1 << pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	4619      	mov	r1, r3
 800042e:	2301      	movs	r3, #1
 8000430:	408b      	lsls	r3, r1
 8000432:	43db      	mvns	r3, r3
 8000434:	4619      	mov	r1, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	400a      	ands	r2, r1
 800043c:	605a      	str	r2, [r3, #4]
	pGPIOx->pGPIOx->OTYPER |= gpio_temphandler;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	6859      	ldr	r1, [r3, #4]
 8000444:	4b44      	ldr	r3, [pc, #272]	; (8000558 <GPIO_Init+0x354>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	430a      	orrs	r2, r1
 800044e:	605a      	str	r2, [r3, #4]

	/* Set the Output Speed */
	gpio_temphandler = RESET;
 8000450:	4b41      	ldr	r3, [pc, #260]	; (8000558 <GPIO_Init+0x354>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
	gpio_temphandler = (pGPIOx->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOx->GPIO_PinConfig.GPIO_PinNumber));
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	799b      	ldrb	r3, [r3, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	461a      	mov	r2, r3
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <GPIO_Init+0x354>)
 800046a:	601a      	str	r2, [r3, #0]
	pGPIOx->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	4619      	mov	r1, r3
 8000478:	2303      	movs	r3, #3
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	609a      	str	r2, [r3, #8]
	pGPIOx->pGPIOx->OSPEEDER |= gpio_temphandler;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6899      	ldr	r1, [r3, #8]
 800048e:	4b32      	ldr	r3, [pc, #200]	; (8000558 <GPIO_Init+0x354>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	430a      	orrs	r2, r1
 8000498:	609a      	str	r2, [r3, #8]

	/* Set the Pull-Up Pull-Down Configuration */

	gpio_temphandler = RESET;
 800049a:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <GPIO_Init+0x354>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
	gpio_temphandler = (pGPIOx->GPIO_PinConfig.PIO_PinPUPDControl << (2*pGPIOx->GPIO_PinConfig.GPIO_PinNumber));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	79db      	ldrb	r3, [r3, #7]
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <GPIO_Init+0x354>)
 80004b4:	601a      	str	r2, [r3, #0]
	pGPIOx->pGPIOx->PUPDR &= ~(0x3 << pGPIOx->GPIO_PinConfig.GPIO_PinNumber);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	68da      	ldr	r2, [r3, #12]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	4619      	mov	r1, r3
 80004c2:	2303      	movs	r3, #3
 80004c4:	408b      	lsls	r3, r1
 80004c6:	43db      	mvns	r3, r3
 80004c8:	4619      	mov	r1, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	400a      	ands	r2, r1
 80004d0:	60da      	str	r2, [r3, #12]
	pGPIOx->pGPIOx->PUPDR |= gpio_temphandler;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68d9      	ldr	r1, [r3, #12]
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <GPIO_Init+0x354>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]

	if(GPIO_MODE_AF == pGPIOx->GPIO_PinConfig.GPIO_PinMode)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d127      	bne.n	800053c <GPIO_Init+0x338>
	{
	   /* Configure Alternate Functionality */
		static uint8_t gpio_AfTemp_handlel,gpio_AfTemp_handleh;
		gpio_AfTemp_handlel = pGPIOx->GPIO_PinConfig.GPIO_PinNumber/8;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	08db      	lsrs	r3, r3, #3
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <GPIO_Init+0x358>)
 80004f6:	701a      	strb	r2, [r3, #0]
		gpio_AfTemp_handleh = pGPIOx->GPIO_PinConfig.GPIO_PinNumber%8;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <GPIO_Init+0x35c>)
 8000504:	701a      	strb	r2, [r3, #0]

		pGPIOx->pGPIOx->AFR[gpio_AfTemp_handlel] |= (pGPIOx->GPIO_PinConfig.GPIO_PinAltFunMode << (4*gpio_AfTemp_handleh));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <GPIO_Init+0x358>)
 800050c:	7812      	ldrb	r2, [r2, #0]
 800050e:	3208      	adds	r2, #8
 8000510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7a5b      	ldrb	r3, [r3, #9]
 8000518:	4619      	mov	r1, r3
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <GPIO_Init+0x35c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	461c      	mov	r4, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	490c      	ldr	r1, [pc, #48]	; (800055c <GPIO_Init+0x358>)
 800052c:	7809      	ldrb	r1, [r1, #0]
 800052e:	4608      	mov	r0, r1
 8000530:	ea42 0104 	orr.w	r1, r2, r4
 8000534:	f100 0208 	add.w	r2, r0, #8
 8000538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bc90      	pop	{r4, r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000021 	.word	0x20000021
 800054c:	40013800 	.word	0x40013800
 8000550:	20000020 	.word	0x20000020
 8000554:	40013c00 	.word	0x40013c00
 8000558:	2000001c 	.word	0x2000001c
 800055c:	20000022 	.word	0x20000022
 8000560:	20000023 	.word	0x20000023

08000564 <GPIO_ClockControl>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx,uint8_t Control)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	if(ENABLE == Control)
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d157      	bne.n	8000626 <GPIO_ClockControl+0xc2>
	{
		/* Enable Requested */
		if(GPIOA == pGPIOx)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a59      	ldr	r2, [pc, #356]	; (80006e0 <GPIO_ClockControl+0x17c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <GPIO_ClockControl+0x28>
			GPIOA_CLK_EN();
 800057e:	4b59      	ldr	r3, [pc, #356]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a58      	ldr	r2, [pc, #352]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
		else if(GPIOH == pGPIOx)
			GPIOH_CLK_DI();
		else
		{ /* Error Handling */}
	}
}
 800058a:	e0a3      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOB == pGPIOx)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a56      	ldr	r2, [pc, #344]	; (80006e8 <GPIO_ClockControl+0x184>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 8000594:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a52      	ldr	r2, [pc, #328]	; (80006e4 <GPIO_ClockControl+0x180>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a0:	e098      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOC == pGPIOx)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a51      	ldr	r2, [pc, #324]	; (80006ec <GPIO_ClockControl+0x188>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 80005aa:	4b4e      	ldr	r3, [pc, #312]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a4d      	ldr	r2, [pc, #308]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b6:	e08d      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOD == pGPIOx)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a4d      	ldr	r2, [pc, #308]	; (80006f0 <GPIO_ClockControl+0x18c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 80005c0:	4b48      	ldr	r3, [pc, #288]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a47      	ldr	r2, [pc, #284]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005cc:	e082      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOE == pGPIOx)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a48      	ldr	r2, [pc, #288]	; (80006f4 <GPIO_ClockControl+0x190>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 80005d6:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a42      	ldr	r2, [pc, #264]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005dc:	f043 0310 	orr.w	r3, r3, #16
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e2:	e077      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOF == pGPIOx)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a44      	ldr	r2, [pc, #272]	; (80006f8 <GPIO_ClockControl+0x194>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a3c      	ldr	r2, [pc, #240]	; (80006e4 <GPIO_ClockControl+0x180>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f8:	e06c      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOG == pGPIOx)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a3f      	ldr	r2, [pc, #252]	; (80006fc <GPIO_ClockControl+0x198>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 8000602:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a37      	ldr	r2, [pc, #220]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060e:	e061      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOH == pGPIOx)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <GPIO_ClockControl+0x19c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d15d      	bne.n	80006d4 <GPIO_ClockControl+0x170>
			GPIOH_CLK_EN();
 8000618:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <GPIO_ClockControl+0x180>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <GPIO_ClockControl+0x180>)
 800061e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000624:	e056      	b.n	80006d4 <GPIO_ClockControl+0x170>
		if(GPIOA == pGPIOx)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <GPIO_ClockControl+0x17c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <GPIO_ClockControl+0xd8>
			GPIOA_CLK_DI();
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2c      	ldr	r2, [pc, #176]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063a:	e04b      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOB == pGPIOx)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <GPIO_ClockControl+0x184>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d106      	bne.n	8000652 <GPIO_ClockControl+0xee>
			GPIOB_CLK_DI();
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <GPIO_ClockControl+0x180>)
 800064a:	f023 0302 	bic.w	r3, r3, #2
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000650:	e040      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOC == pGPIOx)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <GPIO_ClockControl+0x188>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <GPIO_ClockControl+0x104>
			GPIOC_CLK_DI();
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <GPIO_ClockControl+0x180>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000660:	f023 0304 	bic.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000666:	e035      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOD == pGPIOx)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <GPIO_ClockControl+0x18c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <GPIO_ClockControl+0x11a>
			GPIOD_CLK_DI();
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000676:	f023 0308 	bic.w	r3, r3, #8
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067c:	e02a      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOE == pGPIOx)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <GPIO_ClockControl+0x190>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <GPIO_ClockControl+0x130>
			GPIOE_CLK_DI();
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <GPIO_ClockControl+0x180>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <GPIO_ClockControl+0x180>)
 800068c:	f023 0310 	bic.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000692:	e01f      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOF == pGPIOx)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <GPIO_ClockControl+0x194>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <GPIO_ClockControl+0x146>
			GPIOF_CLK_DI();
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <GPIO_ClockControl+0x180>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <GPIO_ClockControl+0x180>)
 80006a2:	f023 0320 	bic.w	r3, r3, #32
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a8:	e014      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOG == pGPIOx)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <GPIO_ClockControl+0x198>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d106      	bne.n	80006c0 <GPIO_ClockControl+0x15c>
			GPIOG_CLK_DI();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <GPIO_ClockControl+0x180>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <GPIO_ClockControl+0x180>)
 80006b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006be:	e009      	b.n	80006d4 <GPIO_ClockControl+0x170>
		else if(GPIOH == pGPIOx)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <GPIO_ClockControl+0x19c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d105      	bne.n	80006d4 <GPIO_ClockControl+0x170>
			GPIOH_CLK_DI();
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <GPIO_ClockControl+0x180>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <GPIO_ClockControl+0x180>)
 80006ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40021400 	.word	0x40021400
 80006fc:	40021800 	.word	0x40021800
 8000700:	40021c00 	.word	0x40021c00

08000704 <GPIO_WritePin>:
 *
 *     \warning
 *//*------------------------------------------------------------------------*/

void GPIO_WritePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber, uint8_t Value)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
 8000710:	4613      	mov	r3, r2
 8000712:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000714:	78bb      	ldrb	r3, [r7, #2]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d109      	bne.n	800072e <GPIO_WritePin+0x2a>
		pGPIOx->ODR |=  (GPIO_PIN_SET << PinNumber);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	78fa      	ldrb	r2, [r7, #3]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	431a      	orrs	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	615a      	str	r2, [r3, #20]
	else
		pGPIOx->ODR &=  ~(GPIO_PIN_SET << PinNumber);
}
 800072c:	e009      	b.n	8000742 <GPIO_WritePin+0x3e>
		pGPIOx->ODR &=  ~(GPIO_PIN_SET << PinNumber);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	78fa      	ldrb	r2, [r7, #3]
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	43d2      	mvns	r2, r2
 800073c:	401a      	ands	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <GPIO_TogglePin>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (GPIO_PIN_SET << PinNumber);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	78fa      	ldrb	r2, [r7, #3]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	405a      	eors	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <GPIO_IRQConfig>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_IRQConfig(uint8_t IRQNumber,uint32_t Action )
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
    if(Action == ENABLE)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d133      	bne.n	80007ee <GPIO_IRQConfig+0x7a>
    {
    	if(IRQNumber <= 31)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d80a      	bhi.n	80007a2 <GPIO_IRQConfig+0x2e>
    	{
            /* Program ISER0 Register. Refer to ARM Cortex M4 Manual */
            *(NVIC_ISER0) |= (1 << IRQNumber);
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <GPIO_IRQConfig+0xec>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a31      	ldr	r2, [pc, #196]	; (8000860 <GPIO_IRQConfig+0xec>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
    	{
    		/* Program ISER2 Register. Refer to ARM Cortex M4 Manual */
    		*(NVIC_ICER3) |= (1 << IRQNumber%64);
    	}
    }
}
 80007a0:	e059      	b.n	8000856 <GPIO_IRQConfig+0xe2>
    	else if(IRQNumber >31 && IRQNumber < 64)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d90f      	bls.n	80007c8 <GPIO_IRQConfig+0x54>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b3f      	cmp	r3, #63	; 0x3f
 80007ac:	d80c      	bhi.n	80007c8 <GPIO_IRQConfig+0x54>
    		*(NVIC_ISER1) |= (1 << IRQNumber%32);
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <GPIO_IRQConfig+0xf0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	f002 021f 	and.w	r2, r2, #31
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <GPIO_IRQConfig+0xf0>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e046      	b.n	8000856 <GPIO_IRQConfig+0xe2>
    	else if(IRQNumber >=64 && IRQNumber < 96)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b3f      	cmp	r3, #63	; 0x3f
 80007cc:	d943      	bls.n	8000856 <GPIO_IRQConfig+0xe2>
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b5f      	cmp	r3, #95	; 0x5f
 80007d2:	d840      	bhi.n	8000856 <GPIO_IRQConfig+0xe2>
    		*(NVIC_ISER3) |= (1 << IRQNumber%64);
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <GPIO_IRQConfig+0xf4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a20      	ldr	r2, [pc, #128]	; (8000868 <GPIO_IRQConfig+0xf4>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e033      	b.n	8000856 <GPIO_IRQConfig+0xe2>
    	if(IRQNumber <= 31)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	d80a      	bhi.n	800080a <GPIO_IRQConfig+0x96>
            *(NVIC_ICER0) |= (1 << IRQNumber);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <GPIO_IRQConfig+0xf8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <GPIO_IRQConfig+0xf8>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	e025      	b.n	8000856 <GPIO_IRQConfig+0xe2>
    	else if(IRQNumber >31 && IRQNumber < 64)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b1f      	cmp	r3, #31
 800080e:	d90f      	bls.n	8000830 <GPIO_IRQConfig+0xbc>
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b3f      	cmp	r3, #63	; 0x3f
 8000814:	d80c      	bhi.n	8000830 <GPIO_IRQConfig+0xbc>
    		*(NVIC_ICER1) |= (1 << IRQNumber%32);
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <GPIO_IRQConfig+0xfc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	79fa      	ldrb	r2, [r7, #7]
 800081c:	f002 021f 	and.w	r2, r2, #31
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a11      	ldr	r2, [pc, #68]	; (8000870 <GPIO_IRQConfig+0xfc>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e012      	b.n	8000856 <GPIO_IRQConfig+0xe2>
    	else if(IRQNumber >=64 && IRQNumber < 96)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b3f      	cmp	r3, #63	; 0x3f
 8000834:	d90f      	bls.n	8000856 <GPIO_IRQConfig+0xe2>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b5f      	cmp	r3, #95	; 0x5f
 800083a:	d80c      	bhi.n	8000856 <GPIO_IRQConfig+0xe2>
    		*(NVIC_ICER3) |= (1 << IRQNumber%64);
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <GPIO_IRQConfig+0x100>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <GPIO_IRQConfig+0x100>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	e7ff      	b.n	8000856 <GPIO_IRQConfig+0xe2>
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000e104 	.word	0xe000e104
 8000868:	e000e10c 	.word	0xe000e10c
 800086c:	e000e180 	.word	0xe000e180
 8000870:	e000e184 	.word	0xe000e184
 8000874:	e000e18c 	.word	0xe000e18c

08000878 <GPIO_IRQPriorityConfig>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint8_t Priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	71bb      	strb	r3, [r7, #6]
	static uint8_t iprx,iprx_section,shift_amount;
	/* Calculate which row the insertion needs to take place*/
	iprx = IRQNumber/4;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <GPIO_IRQPriorityConfig+0x6c>)
 8000890:	701a      	strb	r2, [r3, #0]
	/* Calculate the exact section into which data needs to be written. For a figurative description; refer to the NVIC PR table in ARM M4 Manual */
	iprx_section =  IRQNumber%4;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <GPIO_IRQPriorityConfig+0x70>)
 800089c:	701a      	strb	r2, [r3, #0]
	/* Calculate the exact shift amount by addding 4 (the lower 4 bits are not used as per the manual and hence only higher nibble is written to) */
	shift_amount = (8*iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <GPIO_IRQPriorityConfig+0x70>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <GPIO_IRQPriorityConfig+0x74>)
 80008ac:	701a      	strb	r2, [r3, #0]
	/* Write to the register's appropriate position based on above calculation */
	*(NVIC_PR_BASE_ADDR + iprx) |= (Priority<< shift_amount);
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <GPIO_IRQPriorityConfig+0x6c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008b8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	490a      	ldr	r1, [pc, #40]	; (80008ec <GPIO_IRQPriorityConfig+0x74>)
 80008c2:	7809      	ldrb	r1, [r1, #0]
 80008c4:	408b      	lsls	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <GPIO_IRQPriorityConfig+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008d2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008d6:	430a      	orrs	r2, r1
 80008d8:	601a      	str	r2, [r3, #0]

}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000024 	.word	0x20000024
 80008e8:	20000025 	.word	0x20000025
 80008ec:	20000026 	.word	0x20000026

080008f0 <GPIO_IRQHandler>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_IRQHandler(uint8_t PinNumber)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	static uint8_t count = ZERO;
	/* Called by Respective IRQ Handler. Set the PR Buffer to 1 as indication of servicing/serviced Interrupt */
	if(EXTI->PR & (1<< PinNumber))
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <GPIO_IRQHandler+0x64>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	2101      	movs	r1, #1
 8000902:	fa01 f202 	lsl.w	r2, r1, r2
 8000906:	4013      	ands	r3, r2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d018      	beq.n	800093e <GPIO_IRQHandler+0x4e>
	{
		EXTI->PR |= (1<<PinNumber);
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <GPIO_IRQHandler+0x64>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <GPIO_IRQHandler+0x64>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6153      	str	r3, [r2, #20]
	}
	while(count<=GPIO_MAX_IT_COUNT)
 8000920:	e00d      	b.n	800093e <GPIO_IRQHandler+0x4e>
	{
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000922:	2105      	movs	r1, #5
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <GPIO_IRQHandler+0x68>)
 8000926:	f7ff ff11 	bl	800074c <GPIO_TogglePin>
		gpio_delay(5000);
 800092a:	f241 3088 	movw	r0, #5000	; 0x1388
 800092e:	f000 f817 	bl	8000960 <gpio_delay>
		count++;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <GPIO_IRQHandler+0x6c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <GPIO_IRQHandler+0x6c>)
 800093c:	701a      	strb	r2, [r3, #0]
	while(count<=GPIO_MAX_IT_COUNT)
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <GPIO_IRQHandler+0x6c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b14      	cmp	r3, #20
 8000944:	d9ed      	bls.n	8000922 <GPIO_IRQHandler+0x32>
	}
	count = ZERO;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <GPIO_IRQHandler+0x6c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40013c00 	.word	0x40013c00
 8000958:	40020000 	.word	0x40020000
 800095c:	20000027 	.word	0x20000027

08000960 <gpio_delay>:

static void gpio_delay(uint32_t Value)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	Value*=20;
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
	for(uint32_t i = 0 ; i<= Value; i++);
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e002      	b.n	8000980 <gpio_delay+0x20>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d9f8      	bls.n	800097a <gpio_delay+0x1a>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <LedToggle_GpioInit>:
/*=============================================================================
=======                              METHODS                            =======
=============================================================================*/

void LedToggle_GpioInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
	/* Configure the GPIO corresponding to the ON-Board LED */
    GPIO_Handle_t GpioLed;
    /* Clean Up Structure before population. Sanitary check */
    memset(&GpioLed,0,sizeof(GpioLed));
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	220c      	movs	r2, #12
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f8a5 	bl	8000af0 <memset>

    /* Configure the LED by populating the structure */
    GpioLed.pGPIOx = GPIOA;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <LedToggle_GpioInit+0x48>)
 80009a8:	607b      	str	r3, [r7, #4]
    GpioLed.GPIO_PinConfig.GPIO_PinMode       = GPIO_MODE_OUT;
 80009aa:	2301      	movs	r3, #1
 80009ac:	727b      	strb	r3, [r7, #9]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber     = GPIO_PIN_5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	723b      	strb	r3, [r7, #8]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType     = GPIO_OT_PP;
 80009b2:	2300      	movs	r3, #0
 80009b4:	733b      	strb	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed      = GPIO_MEDIUM_SPEED;
 80009b6:	2301      	movs	r3, #1
 80009b8:	72bb      	strb	r3, [r7, #10]
    GpioLed.GPIO_PinConfig.PIO_PinPUPDControl = GPIO_NO_PUPD;
 80009ba:	2300      	movs	r3, #0
 80009bc:	72fb      	strb	r3, [r7, #11]

    GPIO_ClockControl(GPIOA,ENABLE);
 80009be:	2101      	movs	r1, #1
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <LedToggle_GpioInit+0x48>)
 80009c2:	f7ff fdcf 	bl	8000564 <GPIO_ClockControl>
    GPIO_Init(&GpioLed);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc1b 	bl	8000204 <GPIO_Init>
    while(1)
    {
    	/* Set the LED Bit in a while 1 = ON all the time. This Action is inteneded to change upon activation of a
    	 * GPIO Interrupt */
    	GPIO_WritePin(GPIOA, GPIO_PIN_5, LED_BIT_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2105      	movs	r1, #5
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <LedToggle_GpioInit+0x48>)
 80009d4:	f7ff fe96 	bl	8000704 <GPIO_WritePin>
 80009d8:	e7f9      	b.n	80009ce <LedToggle_GpioInit+0x3a>
 80009da:	bf00      	nop
 80009dc:	40020000 	.word	0x40020000

080009e0 <LedInterrupt_ButtonInit>:
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void LedInterrupt_ButtonInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
	/* Button is at PC13 In Nucleo Board!: As per schematics. */
    GPIO_Handle_t GpioButton;
    /* Clean Up Structure before population. Sanitary check */
    memset(&GpioButton,0,sizeof(GpioButton));
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	220c      	movs	r2, #12
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f87f 	bl	8000af0 <memset>

    /* Configure the LED by populating the structure */
    GpioButton.pGPIOx = GPIOC;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <LedInterrupt_ButtonInit+0x54>)
 80009f4:	607b      	str	r3, [r7, #4]
    GpioButton.GPIO_PinConfig.GPIO_PinMode       = GPIO_MODE_IT_FE;
 80009f6:	2305      	movs	r3, #5
 80009f8:	727b      	strb	r3, [r7, #9]
    GpioButton.GPIO_PinConfig.GPIO_PinNumber     = GPIO_PIN_13;
 80009fa:	230d      	movs	r3, #13
 80009fc:	723b      	strb	r3, [r7, #8]
    GpioButton.GPIO_PinConfig.GPIO_PinSpeed      = GPIO_MEDIUM_SPEED;
 80009fe:	2301      	movs	r3, #1
 8000a00:	72bb      	strb	r3, [r7, #10]
    GpioButton.GPIO_PinConfig.PIO_PinPUPDControl = GPIO_NO_PUPD;
 8000a02:	2300      	movs	r3, #0
 8000a04:	72fb      	strb	r3, [r7, #11]
    GpioButton.GPIO_PinConfig.GPIO_PinOPType     = GPIO_OT_PP;
 8000a06:	2300      	movs	r3, #0
 8000a08:	733b      	strb	r3, [r7, #12]

    /* ***NOTE: This application uses on-board button which is at PC 13 and therefore;
     * The EXTI line 10-15 is configured
     * This will change with change in button input. */

    GPIO_IRQPriorityConfig(EXTI15_10_IRQ_NO,NVIC_IRQ_PRIO15);
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f7ff ff33 	bl	8000878 <GPIO_IRQPriorityConfig>
    /* Configure the EXTI and IRQ */
    GPIO_IRQConfig(EXTI15_10_IRQ_NO,ENABLE);
 8000a12:	2101      	movs	r1, #1
 8000a14:	2028      	movs	r0, #40	; 0x28
 8000a16:	f7ff fead 	bl	8000774 <GPIO_IRQConfig>
    /* Enable Clock Access to GPIO port c */
    GPIO_ClockControl(GPIOC,ENABLE);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <LedInterrupt_ButtonInit+0x54>)
 8000a1e:	f7ff fda1 	bl	8000564 <GPIO_ClockControl>
    /* Populate the GPIO Buffers with the appropriate configuration done above. */
    GPIO_Init(&GpioButton);
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbed 	bl	8000204 <GPIO_Init>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020800 	.word	0x40020800

08000a38 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* Uncomment to Perform Normal Button Pressed Toggle Action */
	//LedToggle_ButtonInit();
	LedInterrupt_ButtonInit();
 8000a3c:	f7ff ffd0 	bl	80009e0 <LedInterrupt_ButtonInit>
	LedToggle_GpioInit();
 8000a40:	f7ff ffa8 	bl	8000994 <LedToggle_GpioInit>
    /* Loop forever */
	for(;;);
 8000a44:	e7fe      	b.n	8000a44 <main+0xc>

08000a46 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
	/* Handle the ON-Board Interrupt Functionality Through the below API! */
	GPIO_IRQHandler(GPIO_PIN_13);
 8000a4a:	200d      	movs	r0, #13
 8000a4c:	f7ff ff50 	bl	80008f0 <GPIO_IRQHandler>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	; (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a82:	f000 f811 	bl	8000aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff ffd7 	bl	8000a38 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a98:	08000b20 	.word	0x08000b20
  ldr r2, =_sbss
 8000a9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aa0:	20000028 	.word	0x20000028

08000aa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <__libc_init_array>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	4d0d      	ldr	r5, [pc, #52]	; (8000ae0 <__libc_init_array+0x38>)
 8000aac:	4c0d      	ldr	r4, [pc, #52]	; (8000ae4 <__libc_init_array+0x3c>)
 8000aae:	1b64      	subs	r4, r4, r5
 8000ab0:	10a4      	asrs	r4, r4, #2
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	42a6      	cmp	r6, r4
 8000ab6:	d109      	bne.n	8000acc <__libc_init_array+0x24>
 8000ab8:	4d0b      	ldr	r5, [pc, #44]	; (8000ae8 <__libc_init_array+0x40>)
 8000aba:	4c0c      	ldr	r4, [pc, #48]	; (8000aec <__libc_init_array+0x44>)
 8000abc:	f000 f820 	bl	8000b00 <_init>
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d105      	bne.n	8000ad6 <__libc_init_array+0x2e>
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad0:	4798      	blx	r3
 8000ad2:	3601      	adds	r6, #1
 8000ad4:	e7ee      	b.n	8000ab4 <__libc_init_array+0xc>
 8000ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ada:	4798      	blx	r3
 8000adc:	3601      	adds	r6, #1
 8000ade:	e7f2      	b.n	8000ac6 <__libc_init_array+0x1e>
 8000ae0:	08000b18 	.word	0x08000b18
 8000ae4:	08000b18 	.word	0x08000b18
 8000ae8:	08000b18 	.word	0x08000b18
 8000aec:	08000b1c 	.word	0x08000b1c

08000af0 <memset>:
 8000af0:	4402      	add	r2, r0
 8000af2:	4603      	mov	r3, r0
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d100      	bne.n	8000afa <memset+0xa>
 8000af8:	4770      	bx	lr
 8000afa:	f803 1b01 	strb.w	r1, [r3], #1
 8000afe:	e7f9      	b.n	8000af4 <memset+0x4>

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
