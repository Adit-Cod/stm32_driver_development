/******************************************************************************
*****                       STM32 GPIO DRIVER                             *****
******************************************************************************/
/*!
***     \file       Stm32f44xx_gpio.c
***
***     \author     Aditya Subramanian
***                 Email.. aditya.subramanian3005@gmail.com
***
***     \brief      This module is intended to act as the main file for the stm32 GPIO Driver
***     \par        File_description
***                 Main file of the Stm32 GPIO Driver
***
***
*\n*/
/*****************************************************************************/

/*=============================================================================
=======                            INCLUDES                             =======
=============================================================================*/

/*------ standard includes -------*/

/*------ project includes --------*/

/*------ module includes --------*/
#include "Stm32f44xx_gpio.h"

/*=============================================================================
=======               DEFINES & MACROS FOR GENERAL PURPOSE              =======
=============================================================================*/

/*=============================================================================
=======                       CONSTANTS  &  TYPES                       =======
=============================================================================*/

/*=============================================================================
=======                  PRIVATE FUNCTION DECLARATIONS                  =======
=============================================================================*/

/*=============================================================================
=======                              METHODS                            =======
=============================================================================*/

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_Init()
 */
/*!    \brief    Initialize the GPIO Peripheral.
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx,uint8_t PinNumber
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_Init(GPIO_Handle_t *pGPIOx)
{

}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_DeInit()
 */
/*!    \brief    De-Initialize the GPIO Peripheral.
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_ClockControl()
 */
/*!    \brief    Control the Clock Access to the respective GPIO Port through RCC Engine
 *
 *
 *     \param   GPIO_RegDef_t *pGPIOx, uint8_t Control
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx,uint8_t Control)
{

}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_ReadPin()
 */
/*!    \brief    Read Value from the given Pin
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx,uint8_t PinNumber
 *
 *     \returns  uint8_t Pin Read out Value
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
uint8_t GPIO_ReadPin(GPIO_Handle_t *pGPIOx,uint8_t PinNumber)
{

	return 0;
}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_ReadPort()
 */
/*!    \brief    Read Value from the given Port
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx
 *
 *     \returns  uint16_t Port Read out Value
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
uint16_t GPIO_ReadPort(GPIO_Handle_t *pGPIOx)
{
	return 0;
}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_WritePin()
 */
/*!    \brief    Write Value to the given Pin
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx,uint8_t PinNumber, uint8_t Value
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/

void GPIO_WritePin(GPIO_Handle_t *pGPIOx,uint8_t PinNumber, uint8_t Value)
{

}

/*---------------------------------------------------------------------------*/
/*     FUNCTION: GPIO_WritePort()
 */
/*!    \brief    Write Value to the given Pin
 *
 *
 *     \param   GPIO_Handle_t *pGPIOx,uint8_t PinNumber, uint8_t Value
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void GPIO_WritePort(GPIO_Handle_t *pGPIOx,uint16_t Value);
void GPIO_TogglePin(GPIO_Handle_t *pGPIOx,uint8_t PinNumber);
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t Action );
void GPIO_IRQHandler(uint8_t PinNumber);
