/******************************************************************************
*****                    STM MAIN GPIO HEADER FILE                        *****
******************************************************************************/
/*!
***     \file       stm32f44xx_gpio.h
***
***     \author     Aditya Subramanian
***
***
***     \brief      This module is intended to provide key GPIO specific details.
***     \par        File_description
***
***
***
*\n*/
/*****************************************************************************/

/*=============================================================================
=======                            INCLUDES                             =======
=============================================================================*/
#ifndef INC_STM32F44XX_GPIO_H_
#define INC_STM32F44XX_GPIO_H_


/*------ standard includes -------*/
#include<stdint.h>
/*------ project includes --------*/

/*------ module includes ---------*/
#include "stm32f446xx.h"

/*=============================================================================
=======               DEFINES & MACROS FOR GENERAL PURPOSE              =======
=============================================================================*/
/* GPIO MACRO Definitions */

/* Access to GPIO A structure with corresponding address */
#define GPIOA    ((GPIO_RegDef_t*)GPIOA_BASEADDR)
/* Access to GPIO B structure with corresponding address */
#define GPIOB    ((GPIO_RegDef_t*)GPIOB_BASEADDR)
/* Access to GPIO C structure with corresponding address */
#define GPIOC    ((GPIO_RegDef_t*)GPIOC_BASEADDR)
/* Access to GPIO D structure with corresponding address */
#define GPIOD    ((GPIO_RegDef_t*)GPIOD_BASEADDR)
/* Access to GPIO E structure with corresponding address */
#define GPIOE    ((GPIO_RegDef_t*)GPIOE_BASEADDR)
/* Access to GPIO F structure with corresponding address */
#define GPIOF    ((GPIO_RegDef_t*)GPIOF_BASEADDR)
/* Access to GPIO G structure with corresponding address */
#define GPIOG    ((GPIO_RegDef_t*)GPIOG_BASEADDR)
/* Access to GPIO H structure with corresponding address */
#define GPIOH    ((GPIO_RegDef_t*)GPIOH_BASEADDR)

#define GPIOA_CLK_EN()     ((RCC->AHB1ENR |= 1<<0))
#define GPIOB_CLK_EN()     ((RCC->AHB1ENR |= 1<<1))
#define GPIOC_CLK_EN()     ((RCC->AHB1ENR |= 1<<2))
#define GPIOD_CLK_EN()     ((RCC->AHB1ENR |= 1<<3))
#define GPIOE_CLK_EN()     ((RCC->AHB1ENR |= 1<<4))
#define GPIOF_CLK_EN()     ((RCC->AHB1ENR |= 1<<5))
#define GPIOG_CLK_EN()     ((RCC->AHB1ENR |= 1<<6))
#define GPIOH_CLK_EN()     ((RCC->AHB1ENR |= 1<<7))

/* Disable GPIO Ports WHEN not needed. Note: By Default Register holds a 0 by default */

#define GPIOA_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<0)))
#define GPIOB_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<1)))
#define GPIOC_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<2)))
#define GPIOD_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<3)))
#define GPIOE_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<4)))
#define GPIOF_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<5)))
#define GPIOG_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<6)))
#define GPIOH_CLK_DI()     ((RCC->AHB1ENR &= ~(1<<7)))

/* Reset the GPIO Registers by using RCC Engine */
#define GPIOA_RESET()     do{ (RCC->AHB1_RSTR |= (1<<0)); (RCC->AHB1_RSTR &= ~(1<<0)); }while(0)
#define GPIOB_RESET()     do{ (RCC->AHB1_RSTR |= (1<<1)); (RCC->AHB1_RSTR &= ~(1<<1)); }while(0)
#define GPIOC_RESET()     do{ (RCC->AHB1_RSTR |= (1<<2)); (RCC->AHB1_RSTR &= ~(1<<2)); }while(0)
#define GPIOD_RESET()     do{ (RCC->AHB1_RSTR |= (1<<3)); (RCC->AHB1_RSTR &= ~(1<<3)); }while(0)
#define GPIOE_RESET()     do{ (RCC->AHB1_RSTR |= (1<<4)); (RCC->AHB1_RSTR &= ~(1<<4)); }while(0)
#define GPIOF_RESET()     do{ (RCC->AHB1_RSTR |= (1<<5)); (RCC->AHB1_RSTR &= ~(1<<5)); }while(0)
#define GPIOG_RESET()     do{ (RCC->AHB1_RSTR |= (1<<6)); (RCC->AHB1_RSTR &= ~(1<<6)); }while(0)
#define GPIOH_RESET()     do{ (RCC->AHB1_RSTR |= (1<<7)); (RCC->AHB1_RSTR &= ~(1<<7)); }while(0)


#define GPIO_PIN_SET       SET
#define GPIO_PIN_RESET     RESET
#define FOUR               0x4
/* Possible GPIO Modes                */
#define GPIO_MODE_IN        0x0
#define GPIO_MODE_OUT       0x1
#define GPIO_MODE_AF        0x2
#define GPIO_MODE_ANALOG    0x3
#define GPIO_MODE_IT_RE     0x4
#define GPIO_MODE_IT_FE     0x5
#define GPIO_MODE_IT_RFT    0x6

/* Possible Pin Out Configurations    */
#define GPIO_OT_PP          0x0
#define GPIO_OT_OD          0x1

/* Possible GPIO Speed Configurations */
#define GPIO_LOW_SPEED     0x0
#define GPIO_MEDIUM_SPEED  0x1
#define GPIO_FAST_SPEED    0x2
#define GPIO_HIGH_SPEED    0x3

/* Possible GPIO PUPD Configurations  */
#define GPIO_NO_PUPD      0x0
#define GPIO_PULLUP       0x1
#define GPIO_PULLDOWN     0x2

/* Possible GPIO PIN Values */
#define GPIO_PIN_0        0
#define GPIO_PIN_1        1
#define GPIO_PIN_2        2
#define GPIO_PIN_3        3
#define GPIO_PIN_4        4
#define GPIO_PIN_5        5
#define GPIO_PIN_6        6
#define GPIO_PIN_7        7
#define GPIO_PIN_8        8
#define GPIO_PIN_9        9
#define GPIO_PIN_10       10
#define GPIO_PIN_11       11
#define GPIO_PIN_12       12
#define GPIO_PIN_13       13
#define GPIO_PIN_14       14
#define GPIO_PIN_15       15

/*=============================================================================
=======                       CONSTANTS  &  TYPES                       =======
=============================================================================*/

/* GPIO PIN Configuration Structure Definition */

typedef struct
{
	/* GPIO Pin Number      */
   uint8_t GPIO_PinNumber;
   /* GPIO Pin Mode         */
   uint8_t GPIO_PinMode;
   /* GPIO Pin Speed        */
   uint8_t GPIO_PinSpeed;
   /* GPIO Pin PuPd Control */
   uint8_t PIO_PinPUPDControl;
   /* GPIO Pin Output Type  */
   uint8_t GPIO_PinOPType;
   /* GPIO Pin AF Mode      */
   uint8_t GPIO_PinAltFunMode;
}GPIO_PinConfig_t;

/* GPIO Handle Structure Definition */

typedef struct
{
	/* Pointer to the Base Address of the GPIO Peripheral. */
	GPIO_RegDef_t *pGPIOx;
	/* Structure to hold the Pin configurations            */
	GPIO_PinConfig_t GPIO_PinConfig;
}GPIO_Handle_t;

/*=============================================================================
=======                       PUBLIC  FUNCTION DECLARATIONS             =======
=============================================================================*/

uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber);
uint16_t GPIO_ReadPort(GPIO_RegDef_t *pGPIOx);
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx,uint8_t Control);
void GPIO_Init(GPIO_Handle_t *pGPIOx);
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber, uint8_t Value);
void GPIO_WritePort(GPIO_RegDef_t *pGPIOx,uint16_t Value);
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber);
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t Action );
void GPIO_IRQHandler(uint8_t PinNumber);
void GPIO_IRQPriorityConfig(uin8_t Priority);

#endif /* INC_STM32F44XX_GPIO_H_ */
