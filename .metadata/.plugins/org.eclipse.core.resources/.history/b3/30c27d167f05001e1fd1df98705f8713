/******************************************************************************
*****                       STM32 SPI DRIVER                             *****
******************************************************************************/
/*!
***     \file       Stm32f44xx_SPI.c
***
***     \author     Aditya Subramanian
***                 Email.. aditya.subramanian3005@gmail.com
***
***     \brief      This module is intended to act as the main file for the stm32 SPI Driver
***     \par        File_description
***                 Main file of the Stm32 SPI Driver
***
***
*\n*/
/*****************************************************************************/

/*=============================================================================
=======                            INCLUDES                             =======
=============================================================================*/

/*------ standard includes -------*/

/*------ project includes --------*/

/*------ module includes --------*/
#include "Stm32f44xx_SPI.h"
#include "Stm32f44xx_gpio.h"

/*=============================================================================
=======               DEFINES & MACROS FOR GENERAL PURPOSE              =======
=============================================================================*/

/*=============================================================================
=======                       CONSTANTS  &  TYPES                       =======
=============================================================================*/

/*=============================================================================
=======                  PRIVATE FUNCTION DECLARATIONS                  =======
=============================================================================*/

/*=============================================================================
=======                              METHODS                            =======
=============================================================================*/

/*---------------------------------------------------------------------------*/
/*     FUNCTION: SPI_ClockControl()
 */
/*!    \brief    Control the Clock Access to the respective SPI Port through RCC Engine
 *
 *
 *     \param    SPI_RegDef_t *pSPIx,uint8_t Control
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/

void SPI_ClockControl(SPI_RegDef_t *pSPIx,uint8_t Control)
{
	if(ENABLE == Control)
	{
		/* Enable Requested */
		if(SPI1 == pSPIx)
			SPI1_CLK_EN();
		else if(SPI2 == pSPIx)
			SPI2_CLK_EN();
		else if(SPI3 == pSPIx)
			SPI3_CLK_EN();
		else if(SPI4 == pSPIx)
			SPI4_CLK_EN();
		else
		{ /* Error Handling */}
	}
	else
	{
		/* Disable Requested */
		if(SPI1 == pSPIx)
			SPI1_CLK_DI();
		else if(SPI2 == pSPIx)
			SPI2_CLK_DI();
		else if(SPI3 == pSPIx)
			SPI3_CLK_DI();
		else if(SPI4 == pSPIx)
			SPI4_CLK_DI();
		else
		{ /* Error Handling */}
	}
}


/*---------------------------------------------------------------------------*/
/*     FUNCTION: SPI_Init()
 */
/*!    \brief    Initialize the SPI Engine
 *
 *
 *     \param    SPI_Handle_t *pSPIx
 *
 *     \returns  void
 *     \pre
 *     \post
 *
 *     \warning
 *//*------------------------------------------------------------------------*/
void SPI_Init(SPI_Handle_t *pSPIx)
{
	static uint32_t tempReg;

	/* Set the Device Mode */
	tempReg |= pSPIx->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	/* Configure Bus Config */

	if(pSPIx->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
        /*  BiDi Bit Cleared  */
		tempReg &= ~(1<<SPI_CR1_BIDI_MODE);

	}
	else if(pSPIx->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
         /* BiDi Bit Set */
		tempReg |= (1<<SPI_CR1_BIDI_MODE);
	}
	else if(pSPIx->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RX)
	{
		/* Clear BiDi Bit */
		tempReg &= ~(1<<SPI_CR1_BIDI_MODE);
		/* Set Rx Only Bit . To force clock for data reception */
		tempReg |= (1<<SPI_CR1_RX_ONLY);
	}
	else
	{/* Error Handling */}

	/* Configure Clock SPI_SclkSpeed */
	tempReg |= pSPIx->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	/* DFF Configuration  */
	tempReg |= pSPIx->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	/* CPOL Configuration */
	tempReg |= pSPIx->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;

	/* CPOH Configuration */
	tempReg |= pSPIx->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	pSPIx->pSPIx->SPI_CR1 = tempReg;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx);

void SPI_Send(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len);

/* IRQ and ISR Handling */
void SPI_IRQConfig(uint8_t IRQNumber, uint32_t Action );
void SPI_IRQHandler(SPI_Handle_t* pHandle);
void SPI_IRQPriorityConfig(uint8_t IRQNumber,uint8_t Priority);
